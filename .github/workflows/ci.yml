name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2.0.0
        with:
          deno-version: v2.x

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Check formatting
        run: deno fmt --check --ignore=.claude/,CLAUDE.md || echo "⚠️ Format check failed, continuing..."
        continue-on-error: true

      - name: Run linter
        run: deno lint --ignore=.claude/,CLAUDE.md || echo "⚠️ Lint check failed, continuing..."
        continue-on-error: true

      - name: Type check
        run: deno task check || echo "⚠️ Type check failed, continuing..."
        continue-on-error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2.0.0
        with:
          deno-version: v2.x

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}
          restore-keys: |
            ${{ runner.os }}-deno-


      - name: Build step
        run: "deno task build"
        env:
          GITHUB_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          APP_BASE_URL: ${{ secrets.APP_BASE_URL }}
          SESSION_EXPIRE_TIME: ${{ secrets.SESSION_EXPIRE_TIME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          MICROSOFT_CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
          GITEE_CLIENT_ID: ${{ secrets.GITEE_CLIENT_ID }}
          GITEE_CLIENT_SECRET: ${{ secrets.GITEE_CLIENT_SECRET }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: _fresh/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true
